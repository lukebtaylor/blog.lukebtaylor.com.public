<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>patterns on Luke's blog site</title><link>http://blog.lukebtaylor.com/tags/patterns/</link><description>Recent content in patterns on Luke's blog site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Jul 2016 22:10:28 -0600</lastBuildDate><atom:link href="http://blog.lukebtaylor.com/tags/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>C# - Task Patterns</title><link>http://blog.lukebtaylor.com/posts/c#-task-patterns/</link><pubDate>Thu, 07 Jul 2016 22:10:28 -0600</pubDate><guid>http://blog.lukebtaylor.com/posts/c#-task-patterns/</guid><description>Tasks
Get The Number of Logical Cores var logicalCoreCount = Environment.ProcessorCount; Wait All One By One List &amp;lt; Task &amp;lt;TResult&amp;gt;&amp;gt; tasks = new List &amp;lt; Task&amp;lt;TResult&amp;gt;&amp;gt; (); for (int i = 0; i &amp;lt; N; i++) // Start N tasks: { tasks.Add( Task.Factory.StartNew&amp;lt;TResult&amp;gt; (code) ); } while (tasks.Count &amp;gt; 0) { // Get the array index of the task that finishes first int index = Task.WaitAny( tasks.ToArray() ); // This will never throw an exception here // Catch the exception like this try { tasks[index].</description></item></channel></rss>